{"version":3,"sources":["components/Button.js","components/Display.js","App.js","actions/actions.js","serviceWorker.js","reducers/reducers.js","store/index.js","index.js"],"names":["Button","props","react_default","a","createElement","onClick","className","style","value","Display","displayValue","Number","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","setDisplay","_this2","components_Display","components_Button","inputNumber","inputOperator","clear","Component","connect","state","type","number","operator","Boolean","window","location","hostname","match","initialState","currentValue","inputValue","history","operators","+","b","-","*","/","=","store","createStore","arguments","length","undefined","action","objectSpread","newValue","currentInputZero","check","currentInputNonZero","actionNumber","calc","newOperator","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d767cdd.chunk.js","sourcesContent":["import React from 'react';\n\nconst Button = (props) => {\n  return(\n    <button onClick={props.onClick} className={props.style}\n    >\n    {props.value}\n    </button>\n  );\n}\n\nexport default Button;\n","import React from \"react\";\n\nfunction Display(props) {\n  let displayValue = Number(props.displayValue);\n  return <div className=\"display\">{displayValue}</div>;\n}\n\nexport default Display;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { clear, inputNumber, inputOperator } from \"./actions/actions.js\";\n\nimport Button from \"./components/Button\";\nimport Display from \"./components/Display\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(value) {\n    this.props.setDisplay(value);\n  }\n\n  render() {\n    return (\n      <div className=\"app-body\">\n        <div>\n          <div className=\"calculator-title\">\n            <h1>ekino.</h1>\n          </div>\n          <div className=\"calculator-subtitle\">\n            <h2>Basic Calculator</h2>\n          </div>\n          <Display displayValue={this.props.displayValue} />\n          <div className=\"button-container\">\n            <div className=\"button-row\">\n              <Button\n                value=\"7\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\"7\")}\n              />\n              <Button\n                value=\"8\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\"8\")}\n              />\n              <Button\n                value=\"9\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\"9\")}\n              />\n              <Button\n                value=\"+\"\n                style=\"operator\"\n                onClick={() => this.props.inputOperator(\"+\")}\n              />\n            </div>\n            <div className=\"button-row\">\n              <Button\n                value=\"4\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\"4\")}\n              />\n              <Button\n                value=\"5\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\"5\")}\n              />\n              <Button\n                value=\"6\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\"6\")}\n              />\n              <Button\n                value=\"-\"\n                style=\"operator\"\n                onClick={() => this.props.inputOperator(\"-\")}\n              />\n            </div>\n            <div className=\"button-row\">\n              <Button\n                value=\"1\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\"1\")}\n              />\n              <Button\n                value=\"2\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\"2\")}\n              />\n              <Button\n                value=\"3\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\"3\")}\n              />\n              <Button\n                value=\"/\"\n                style=\"operator\"\n                onClick={() => this.props.inputOperator(\"/\")}\n              />\n            </div>\n            <div className=\"button-row\">\n              <Button\n                value=\"0\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\"0\")}\n              />\n              <Button\n                value=\".\"\n                style=\"number\"\n                onClick={() => this.props.inputNumber(\".\")}\n              />\n              <Button\n                value=\"=\"\n                style=\"equals\"\n                onClick={() => this.props.inputOperator(\"=\")}\n              />\n              <Button\n                value=\"*\"\n                style=\"operator\"\n                onClick={() => this.props.inputOperator(\"*\")}\n              />\n            </div>\n            <div className=\"button-full-row\">\n              <Button value=\"CLEAR\" style=\"clear\" onClick={this.props.clear} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    displayValue: state.displayValue\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  { clear, inputNumber, inputOperator }\n)(App);\n","export const INPUT_NUMBER = 'INPUT_NUMBER'\nexport const INPUT_OPERATOR = 'INPUT_OPERATOR'\nexport const CLEAR = 'CLEAR'\n\nexport const inputNumber = (number) => {\n  return{\n    type:INPUT_NUMBER,\n    number\n  }\n}\n\nexport const inputOperator = (operator) => {\n  return{\n    type:INPUT_OPERATOR,\n    operator\n  }\n}\n\nexport const clear = () => {\n  return{\n    type:CLEAR,\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CLEAR, INPUT_NUMBER, INPUT_OPERATOR } from \"../actions/actions\";\n\nconst initialState = {\n  currentValue: 0,\n  inputValue: 0,\n  displayValue: 0,\n  operator: null,\n  history: {\n    inputValue: null,\n    operator: null\n  }\n};\n\nconst operators = {\n  \"+\": (a, b) => Number(a) + Number(b),\n  \"-\": (a, b) => Number(a) - Number(b),\n  \"*\": (a, b) => Number(a) * Number(b),\n  \"/\": (a, b) => Number(a) / Number(b),\n  \"=\": (a, b) => Number(a)\n};\n\nconst currentInputZero = (inputValue, number) => {\n  switch (number) {\n    case \".\":\n      return  \"0.\";\n    case \"0\":\n      return \"\" + inputValue;\n    default:\n      return  \"\" + number;\n  }\n};\n\nconst currentInputNonZero = (inputValue, number) => {\n  let newValue;\n  if (number === \".\") {\n    let check = \"\" + inputValue;\n    if (check.match(/\\./)) {\n      check.match(/^./) ? (newValue = \".\") : (newValue = check);\n    } else {\n      newValue = check + number;\n    }\n  } else {\n    newValue = inputValue + number;\n  }\n  return newValue;\n};\n\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n\n    case CLEAR:\n      return { ...initialState };\n\n    case INPUT_NUMBER:\n      let newValue;\n      state.inputValue === 0\n        ? (newValue = currentInputZero(state.inputValue, action.number))\n        : (newValue = currentInputNonZero(state.inputValue, action.number));\n      if (state.operator !== null && state.currentValue === 0) {\n        let actionNumber = action.number === \".\" ? \"0.\" : action.number;\n        return {\n          ...state,\n          currentValue: state.inputValue,\n          inputValue: actionNumber,\n          displayValue: actionNumber\n        };\n      } else {\n        return { ...state, inputValue: newValue, displayValue: newValue };\n      }\n\n    case INPUT_OPERATOR:\n      let calc;\n      if (state.operator === null) {\n        if (\n          action.operator === \"=\" &&\n          state.history.operator\n          // && state.history.inputValue\n        ) {\n          calc = operators[state.history.operator](\n            state.currentValue,\n            state.history.inputValue\n          );\n          return {\n            ...state,\n            currentValue: calc,\n            inputValue: 0,\n            displayValue: calc\n          };\n        }\n        if (state.inputValue === 0) {\n          return {\n            ...state,\n            currentValue: 0,\n            inputValue: state.currentValue,\n            operator: action.operator\n          };\n        }\n        return {\n          ...state,\n          currentValue: state.inputValue,\n          inputValue: 0,\n          operator: action.operator\n        };\n      } else {\n        calc = operators[state.operator](state.currentValue, state.inputValue);\n        let newOperator = action.operator === \"=\" ? null : action.operator;\n        return {\n          ...state,\n          currentValue: calc,\n          inputValue: 0,\n          displayValue: calc,\n          operator: newOperator,\n          history: {\n            ...state.history,\n            inputValue: state.inputValue,\n            operator: state.operator\n          }\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n","import { createStore } from \"redux\";\nimport reducers from \"../reducers/reducers.js\";\n\nexport const store = createStore(reducers);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './store'\n\nimport './styles.css'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}